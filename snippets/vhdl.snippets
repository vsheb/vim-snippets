
#
## Libraries

snippet lib
	library ${1}
	use $1.${2}

# Standard Libraries
snippet libs
	library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

# Xilinx Library
snippet libx
	library unisim;
	use unisim.vcomponents.all;

## Entity Declaration
snippet entg
	entity ${1:`vim_snippets#Filename()`} is
		generic (
			${2}
		);
		port (
			clk      : in std_logic;
			rst      : in std_logic;
			${3}
		);
	end entity $1;

snippet ent
	entity ${1:`vim_snippets#Filename()`} is
		port (
			clk      : in std_logic;
			rst      : in std_logic;
			${2}
		);
	end entity $1;

## Architecture
snippet arc
	architecture ${1:behav} of ${2:`vim_snippets#Filename()`} is

		${3}

	begin

		$0

	end $1;

## Declarations
# std_logic
snippet st
	signal ${1} : std_logic := '${2:0}';
# std_logic_vector
snippet sv
	signal ${1} : std_logic_vector(${2} downto 0);
snippet sl
	std_logic
snippet slv
	std_logic_vector(${1} downto ${2})
# std_logic in
snippet ist
	${1} : in std_logic;
# std_logic_vector in
snippet isv
	${1} : in std_logic_vector(${2} downto 0);
# std_logic out
snippet ost
	${1} : out std_logic;
# std_logic_vector out
snippet osv
	${1} : out std_logic_vector(${2} downto 0);
# unsigned
snippet un
	signal ${1} : unsigned(${2} downto 0);
snippet u
	unsigned(${1} downto 0)${0}
## Process Statements
# process
snippet pr
	process (${1})
	begin
		${2}
	end process;
# process with clock
snippet prc
	process (${1:clk})
	begin
		if rising_edge($1) then
			${2}
		end if;
	end process;
# process with clock and sync reset
snippet prr
	process (${1:clk})
	begin
		if rising_edge($1) then
			if ${2:rst} = '1' then
				${3}
			else
				${4}
			end if;
		end if;
	end process;
# process with clock and reset
snippet prcr
	process (${1:clk}, ${2:rst})
	begin
		if ($2 = '${3:1}') then
			${4}
		elsif rising_edge($1) then
			${5}
		end if;
	end process;
# process all
snippet pra
	process (${1:all})
	begin
		${2}
	end process;
## Control Statements
# if
snippet if
	if ${1} then
		${2}
	end if;
# if
snippet ife
	if ${1} then
		${2}
	else
		${3}
	end if;
# else
snippet el
	else
		${1}
# if
snippet eif
	elsif ${1} then
		${2}
# case
snippet ca
	case ${1} is
		when ${2} => ${0}
	end case;
# when
snippet wh
	when ${1} =>
		${2}
# for
snippet for
	for ${1:i} in ${2} ${3:to} ${4} loop
		${5}
	end loop;
# for generate
snippet forg
	${1:LABEL} : for ${2:i} in 0 to ${3} generate
		${0}
	end generate $1;
# while
snippet wh
	while ${1} loop
		${2}
	end loop;
## Misc
# others
snippet myent
	library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

	entity ${1:`vim_snippets#Filename()`} is 
		generic (
			GATE_DELAY_G  : time := 1 ns
		);
		port ( 
			clk           : in  std_logic;
			rst           : in  std_logic
			${2}
		); 
	end $1;

	architecture rtl of $1 is

	$0

	begin


	end rtl;
snippet oth
	(others => '${1:0}')

snippet eo
  := (others => '0')

snippet myentf
	library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

	entity ${1:`vim_snippets#Filename()`} is 
		 generic (
				GATE_DELAY_G  : time := 1 ns
		 );
		 port ( 
				clk           : in  std_logic;
				rst           : in  std_logic
				${0}
		 ); 
	end $1;

	architecture rtl of $1 is

		 type StateType is (IDLE_S);
		 
		 type RegType is record
				state         : StateType;
		 end record RegType;
		 
		 constant REG_INIT_C : RegType := (
				state         => IDLE_S
		 );
	
		 
		 signal r            : RegType          := REG_INIT_C;
		 signal rin          : RegType;

	begin

		 -------------------------------------------------------
		 -- next state logic
		 -------------------------------------------------------
		 COMB : process(r)
		 begin
				rin <= r;
				case r.state is
					 when IDLE_S => 

					 when others =>
							rin.state <= IDLE_S;

				end case;
		 end process COMB;
		 -------------------------------------------------------

		 -------------------------------------------------------
		 --- sequential logic
		 -------------------------------------------------------
		 SEQ : process(clk) 
		 begin
				if (rising_edge(clk)) then
					 if rst = '1' then
							r <= REG_INIT_C;
					 else
							r <= rin after GATE_DELAY_G;
					 end if;
				end if;
		 end process SEQ;
		 -------------------------------------------------------

	end rtl;

snippet pos "output port"
	${1}        : out std_logic;	
snippet pis "output port"
	${1}        : in  std_logic;	
snippet posv "output port slv"
	${1}        : out std_logic_vector(${2} downto 0);	
snippet pisv "output port slv"
	${1}        : in  std_logic_vector(${2} downto 0);	
snippet cbox "Comment box" 
	---------------------------------------------------------------
	-- $0
	---------------------------------------------------------------
snippet cli "Comment line" 
	---------------------------------------------------------------
